package strm

// Producer is any function that produce values to be sended between goroutines
type Producer[T any] func(StreamSender[T], StreamDeadline)

// Generate confine the products generated by the Producer
func Generate[T any](quit StreamDeadline, produce Producer[T]) Transporter[T] {
	if produce == nil {
		return NewTransporter[T](nil, nil)
	}

	cargo := Confine(func(sender StreamSender[T]) {
		produce(sender, quit)
	})

	return NewTransporter(cargo, quit)
}

// GenerateEnqueue confine the products generated by the producer into a queue (buffered channel)
func GenerateEnqueue[T any](queueSize int, quit StreamDeadline, produce Producer[T]) Transporter[T] {
	if produce == nil {
		return NewTransporter[T](nil, nil)
	}

	cargo := ConfineEnqueue(queueSize, func(sender StreamSender[T]) {
		produce(sender, quit)
	})

	return NewTransporter(cargo, quit)
}
